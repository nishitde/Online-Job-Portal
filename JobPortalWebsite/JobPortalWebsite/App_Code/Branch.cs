//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyJobPortalModel {
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Configuration;
    
    
    public class Branch {
        
        private Int32 _Id;
        
        private Int32 _CompanyId;
        
        private String _BranchName;
        
        private String _AddressLine1;
        
        private String _AddressLine2;
        
        private Int32 _CityId;
        
        private String _Pincode;
        
        private Int32 _StateId;
        
        private Int32 _CountryId;
        
        private String _PhoneNumber1;
        
        private String _PhoneNumber2;
        
        private String _EmailId1;
        
        private String _EmailId2;
        
        public Branch(int ID) {
			SqlConnection ObjConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["MyJobPortal"].ConnectionString);
			ObjConnection.Open();
			SqlCommand ObjCommand = new SqlCommand("select * from Branch where ID = " + ID , ObjConnection);
			SqlDataReader ObjReader = ObjCommand.ExecuteReader();
			ObjReader.Read();
			if(ObjReader["Id"] != DBNull.Value)
				Id = (int)ObjReader["Id"];
			if(ObjReader["CompanyId"] != DBNull.Value)
				CompanyId = (int)ObjReader["CompanyId"];
			if(ObjReader["BranchName"] != DBNull.Value)
				BranchName = (string)ObjReader["BranchName"];
			if(ObjReader["AddressLine1"] != DBNull.Value)
				AddressLine1 = (string)ObjReader["AddressLine1"];
			if(ObjReader["AddressLine2"] != DBNull.Value)
				AddressLine2 = (string)ObjReader["AddressLine2"];
			if(ObjReader["CityId"] != DBNull.Value)
				CityId = (int)ObjReader["CityId"];
			if(ObjReader["Pincode"] != DBNull.Value)
				Pincode = (string)ObjReader["Pincode"];
			if(ObjReader["StateId"] != DBNull.Value)
				StateId = (int)ObjReader["StateId"];
			if(ObjReader["CountryId"] != DBNull.Value)
				CountryId = (int)ObjReader["CountryId"];
			if(ObjReader["PhoneNumber1"] != DBNull.Value)
				PhoneNumber1 = (string)ObjReader["PhoneNumber1"];
			if(ObjReader["PhoneNumber2"] != DBNull.Value)
				PhoneNumber2 = (string)ObjReader["PhoneNumber2"];
			if(ObjReader["EmailId1"] != DBNull.Value)
				EmailId1 = (string)ObjReader["EmailId1"];
			if(ObjReader["EmailId2"] != DBNull.Value)
				EmailId2 = (string)ObjReader["EmailId2"];
			ObjReader.Close();
			ObjConnection.Dispose();
			ObjCommand.Dispose();
        }
        
        public virtual Int32 Id {
            get {
				return _Id;
            }
            set {
				_Id = value;
            }
        }
        
        public virtual Int32 CompanyId {
            get {
				return _CompanyId;
            }
            set {
				_CompanyId = value;
            }
        }
        
        public virtual String BranchName {
            get {
				return _BranchName;
            }
            set {
				_BranchName = value;
            }
        }
        
        public virtual String AddressLine1 {
            get {
				return _AddressLine1;
            }
            set {
				_AddressLine1 = value;
            }
        }
        
        public virtual String AddressLine2 {
            get {
				return _AddressLine2;
            }
            set {
				_AddressLine2 = value;
            }
        }
        
        public virtual Int32 CityId {
            get {
				return _CityId;
            }
            set {
				_CityId = value;
            }
        }
        
        public virtual String Pincode {
            get {
				return _Pincode;
            }
            set {
				_Pincode = value;
            }
        }
        
        public virtual Int32 StateId {
            get {
				return _StateId;
            }
            set {
				_StateId = value;
            }
        }
        
        public virtual Int32 CountryId {
            get {
				return _CountryId;
            }
            set {
				_CountryId = value;
            }
        }
        
        public virtual String PhoneNumber1 {
            get {
				return _PhoneNumber1;
            }
            set {
				_PhoneNumber1 = value;
            }
        }
        
        public virtual String PhoneNumber2 {
            get {
				return _PhoneNumber2;
            }
            set {
				_PhoneNumber2 = value;
            }
        }
        
        public virtual String EmailId1 {
            get {
				return _EmailId1;
            }
            set {
				_EmailId1 = value;
            }
        }
        
        public virtual String EmailId2 {
            get {
				return _EmailId2;
            }
            set {
				_EmailId2 = value;
            }
        }
        
        public static Int32 AddBranch(Int32 CompanyId, String BranchName, String AddressLine1, String AddressLine2, Int32 CityId, String Pincode, Int32 StateId, Int32 CountryId, String PhoneNumber1, String PhoneNumber2, String EmailId1, String EmailId2) {
			string strsql = "insert into Branch output inserted.id values(" + CompanyId + "," + "'"+ BranchName.Replace("'","''") + "'," + "'"+ AddressLine1.Replace("'","''") + "'," + "'"+ AddressLine2.Replace("'","''") + "'," + CityId + "," + "'"+ Pincode.Replace("'","''") + "'," + StateId + "," + CountryId + "," + "'"+ PhoneNumber1.Replace("'","''") + "'," + "'"+ PhoneNumber2.Replace("'","''") + "'," + "'"+ EmailId1.Replace("'","''") + "'," + "'"+ EmailId2.Replace("'","''") + "'" + ")"; 
			SqlConnection ObjConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["MyJobPortal"].ConnectionString);
			ObjConnection.Open();
			SqlCommand ObjCommand = new SqlCommand(strsql,ObjConnection);
			int NewID = (int) ObjCommand.ExecuteScalar();
			ObjConnection.Dispose();
			ObjCommand.Dispose();
			return NewID;
        }
        
        public static DataTable GetBranchRecords(string WhereClause) {
			SqlConnection ObjConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["MyJobPortal"].ConnectionString);
			DataTable ObjDataTable= new DataTable();
			string strsql ="select * from Branch";
			if(WhereClause != String.Empty) strsql= strsql + " where " + WhereClause;
			SqlDataAdapter ObjAdapter = new SqlDataAdapter(strsql,ObjConnection);
			ObjAdapter.Fill(ObjDataTable);
			ObjAdapter.Dispose();
			ObjConnection.Dispose();
			return ObjDataTable;
        }
        
        public void Update() {
			string strsql= "update Branch set " + "CompanyId= " + CompanyId + ", " + "BranchName= '" + BranchName.Replace("'","''") + "', " + "AddressLine1= '" + AddressLine1.Replace("'","''") + "', " + "AddressLine2= '" + AddressLine2.Replace("'","''") + "', " + "CityId= " + CityId + ", " + "Pincode= '" + Pincode.Replace("'","''") + "', " + "StateId= " + StateId + ", " + "CountryId= " + CountryId + ", " + "PhoneNumber1= '" + PhoneNumber1.Replace("'","''") + "', " + "PhoneNumber2= '" + PhoneNumber2.Replace("'","''") + "', " + "EmailId1= '" + EmailId1.Replace("'","''") + "', " + "EmailId2= '" + EmailId2.Replace("'","''") + "' " + " where ID ="  + Id ;
			SqlConnection ObjConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["MyJobPortal"].ConnectionString);
			ObjConnection.Open();
			SqlCommand ObjCommand = new SqlCommand(strsql,ObjConnection);
			ObjCommand.ExecuteNonQuery();
			ObjConnection.Dispose();
			ObjCommand.Dispose();
        }
        
        public static void DeleteBranchRecords(string WhereClause) {
			SqlConnection ObjConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["MyJobPortal"].ConnectionString);
			ObjConnection.Open();
			DataTable ObjDataTable= new DataTable();
			string strsql ="delete from Branch";
			if(WhereClause != String.Empty) strsql= strsql + " where " + WhereClause;
			SqlCommand ObjCommand = new SqlCommand(strsql,ObjConnection);
			ObjCommand.ExecuteNonQuery();
			ObjCommand.Dispose();
			ObjConnection.Dispose();
        }
    }
}
